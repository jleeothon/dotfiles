[user]
	useConfigOnly = true
[alias]
	alias = "!f() { git config --get-regexp "alias.${1}"; }; f"
	amend = commit --amend --reuse-message HEAD
	amendall = commit --amend -a --reuse-message HEAD
	amendmess = commit --amend
	author-reset = commit --amend --reset-author
	cd = checkout
	checkmaster = checkout origin/master --
	commitm = commit -m
	diffup = diff @{upstream}
	fixlast = "!f() { C=HEAD~$1; [ -z $1 ] && C=HEAD~2; GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash $C; }; f"
	fixtil = "!f() { [ -z $1 ] && C="HEAD~2" || C="$1~"; GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash $C; }; f"
	fixup = !git-fixup.sh $@
	force = push -u --force --force-with-lease origin HEAD
	hub = "!github $@"
	last = log -1 HEAD
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	newbranch = checkout -b
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	puff = push -u --force --force-with-lease
	pushup = push -u origin HEAD
	reblast = "!f() { git rebase -i HEAD~$1; }; f"
	rebroot = rebase -i --root master
	rebtil = "!f() { git rebase -i $1~; }; f"
	resetupstream = reset --hard @{upstream}
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
 	mess = "!f() { args=\"$@\"; git commit -m \"$args\"; }; f"
 	squash = commit --squash HEAD
[diff]
	submodule = log
[fetch]
	recurseSubmodules = on-demand
[status]
	submoduleSummary = true
[include]
	path = ./.private.gitconfig
[filter "lfs"]
	clean = git-lfs clean -- %f
	process = git-lfs filter-process
	required = true
	smudge = git-lfs smudge -- %f
